
Q1: Today, we used two variables in a for-loop. Is it also possible to iterate using three or more variables?

A: Yes. You have to use as many variables as there are items in the internal tuples or lists. In the example below, we iterate using three variables:

buttons = [('John', 'Sen', 'Morro'), ('Lin', 'Ajay', 'Filip')]
for first, second, third in buttons:
    print(first, second, third)
Note that the enumerate function always produces a sequence of tuples each containing two items. Therefore, when using enumerate, you have to use two variables, not less, not more.

Q2: Is an f-string always used in conjunction with a for loop?

A: No. f-strings can be used independently. For example:

name = input("Enter your name: ")
print(f"Your name is {name}.")
Here is the output of that:





Q1: Can Python open other types of files rather than .txt files?

A: First, you should know that there are two types of files, binary and non-binary. Non-binary files are files such as .txt, .csv, .py, .html, .json, and any other file whose content can be viewed on any text editor program (e.g., Notepad, TextEdit, etc.).  You can read and write content in non-binary using the same open function. For example:

file = open("home.html", 'w')
file.write("<html>\n <h1>This is the home page</h1>\n</html>")
file.close()
The code above would create an HTML file. The content we wrote in that file is HTML code, and HTML code is just non-binary content (i.e., text).

On the other hand, examples of binary files are .xlsx, .mp4, .docx, and other files whose content cannot be correctly handled through a text editor. Such files need specific programs (i.e., Excel, Media Player, Microsoft Word, etc.) that let users edit and view such files. Therefore, you cannot view the content of such files in Python either. That being said, it is still possible to use the Python open function to handle such files. However, the use cases of handling binary files are specific and rare. Therefore we will not cover the handling of binary files right now and will focus on more crucial features of the language instead.

Q2: I have heard that it is better to use the Python with context manager to handle files. Why didn't we do that today?

A: We will learn that eventually, but we are taking things step by step. We will cover the with context manager on Day 8.